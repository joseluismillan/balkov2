{"version":3,"sources":["components/NumericWidget/NumericWidget.tsx","aws-exports.js","theme.tsx","components/NavigationBar/NavigationBar.tsx","components/Layout/Layout.tsx","components/SensorMarker/SensorMarker.tsx","api/Sensors.tsx","graphql/queries.ts","pages/MapPage/MapPage.tsx","graphql/subscriptions.ts","components/LineChartWidget/LineChartWidget.tsx","pages/SensorPage/SensorPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["WIDGET_MODE","awsmobile","theme","createMuiTheme","palette","type","primary","main","secondary","error","red","A400","useStyles","makeStyles","title","flexGrow","toolbarButtons","marginLeft","NavigationBar","location","useLocation","classes","history","useHistory","AppBar","position","Toolbar","Typography","variant","className","Button","color","onClick","pathname","push","appBody","minHeight","Layout","props","Box","my","children","SensorMarker","longitude","latitude","fontSize","style","onSensorClick","id","GetSensor","sensorId","a","API","graphql","graphqlOperation","response","data","getSensor","r","GetSensors","listSensors","Array","navStyle","top","left","padding","MapPage","useState","zoom","bearing","pitch","viewPort","setViewPort","sensors","setSensors","readyToSubscribe","setReadyToSubscribe","useEffect","console","log","initSensors","subscriber","subscribe","next","value","onCreateSensorValues","newSensors","item","status","unsubscribe","handleSensorClick","width","height","mapStyle","onViewportChange","mapboxApiAccessToken","settings","map","sensor","geo","paper","spacing","display","overflow","flexDirection","marginTop","marginRight","NumericWidget","mode","count","total","current","avg","min","max","values","setValues","newValues","parseFloat","toFixed","UpdateValues","Paper","CircularProgress","AVG","CURRENT","MIN","MAX","defaults","global","defaultFontColor","chart","LineChartWidget","labels","datasets","pointBackgroundColor","chartData","setChartData","newChartDataSet","newChartData","concat","Date","toLocaleTimeString","options","legend","responsive","maintainAspectRatio","dashboardContainer","marginBottom","SensorPage","useParams","name","setName","pH","setPH","temperature","setTemperature","salinity","setSalinity","disolvedO2","setDisolvedO2","initSensor","onCreateSensorValue","Container","maxWidth","align","Grid","container","xs","sm","md","lg","xl","withAuthenticator","exact","path","component","to","hideAllDefaults","signUpFields","label","key","required","placeholder","displayOrder","Boolean","window","hostname","match","Amplify","configure","config","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a264b31b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n        height: 175\r\n    },\r\n    title: {\r\n        fontSize:20\r\n    },\r\n    value: {\r\n        fontSize:75,\r\n        marginTop:10,\r\n        marginLeft:'auto',\r\n        marginRight:'auto'\r\n    }\r\n}));\r\n\r\nexport enum WIDGET_MODE {\r\n    CURRENT,\r\n    AVG,\r\n    MIN,\r\n    MAX\r\n}\r\n\r\ninterface IProps {\r\n    mode: WIDGET_MODE,\r\n    title: string,\r\n    value: number | null\r\n}\r\n\r\ninterface IValues {\r\n    count: number,\r\n    total: number,\r\n    avg: number,\r\n    current: number,\r\n    min: number,\r\n    max: number\r\n}\r\n\r\nconst NumericWidget: React.FC<IProps> = ({mode, title, value}: IProps) => {\r\n  \r\n  const classes = useStyles();\r\n\r\n  const [values, setValues] = useState<IValues>({\r\n    count: 0,\r\n    total: 0,\r\n    current: 0,\r\n    avg: 0,\r\n    min: 0,\r\n    max: 0\r\n  })\r\n\r\n  useEffect(() => {\r\n\r\n    const UpdateValues = (value : number)=> {\r\n\r\n      const newValues = { ...values };\r\n\r\n      newValues.current = value;\r\n      newValues.count = newValues.count + 1;\r\n      newValues.total = newValues.total + value;\r\n      newValues.avg = parseFloat((newValues.total / newValues.count).toFixed(1));\r\n\r\n      if (value > newValues.max) {\r\n        newValues.max = value;\r\n      }\r\n  \r\n      if (newValues.min === 0 || value < newValues.min) {\r\n        newValues.min = value;\r\n      }\r\n\r\n      setValues(newValues);\r\n    }\r\n\r\n    if (value) {\r\n      UpdateValues(value);\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [value]);\r\n\r\n  return (\r\n    <Paper className={classes.paper}>\r\n        <div className={classes.title}>\r\n            {title}\r\n        </div>\r\n        <div className={classes.value}>\r\n            { !value && \r\n                <CircularProgress color=\"secondary\" />\r\n            }\r\n            { value && mode === WIDGET_MODE.AVG &&\r\n                values.avg\r\n            }\r\n            { value && mode === WIDGET_MODE.CURRENT &&\r\n                values.current\r\n            }\r\n            { value && mode === WIDGET_MODE.MIN &&\r\n                values.min\r\n            }\r\n            { value && mode === WIDGET_MODE.MAX &&\r\n                values.max\r\n            }\r\n        </div>\r\n    </Paper>  \r\n  );\r\n}\r\n\r\nexport default NumericWidget;\r\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:e7c0eb35-948e-4c93-a996-04816ab8d7c7\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_ShGCiUstB\",\n    \"aws_user_pools_web_client_id\": \"7rso807hvs9ju6cp1n2i776m7h\",\n    \"oauth\": {},\n    \"aws_appsync_graphqlEndpoint\": \"https://r3mb5ljur5eqnkyho34cns6oey.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\"\n};\n\n\nexport default awsmobile;\n","import red from '@material-ui/core/colors/red';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\n// A custom theme for this app\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    primary: {\r\n      main: '#232F3E',\r\n    },\r\n    secondary: {\r\n      main: '#ffffff',\r\n    },\r\n    error: {\r\n      main: red.A400,\r\n    }\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import React from 'react';\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Theme, makeStyles } from '@material-ui/core';\r\n\r\n// import { ROUTES } from '../../common/constants';\r\n// import Logo from '../../assets/images/logo.png';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  toolbarButtons: {\r\n    marginLeft: 'auto',\r\n  },\r\n}));\r\n\r\nconst NavigationBar: React.FC = () => {\r\n\r\n  const location = useLocation();\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const handleMap = () => {\r\n    if (location.pathname !== \"/\") {\r\n      history.push(\"/\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Red IOT Balko\r\n            </Typography>\r\n          \r\n          <div className={classes.toolbarButtons}>\r\n              <Button color=\"inherit\" onClick={()=> handleMap()}>Map</Button>\r\n          </div>\r\n        </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default NavigationBar;\r\n","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport { Theme, makeStyles } from '@material-ui/core';\r\n\r\nimport NavigationBar from '../NavigationBar/NavigationBar';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n\tappBody: {\r\n\t\tminHeight: '600px'\r\n\t\t}\r\n}));\r\n\r\nconst Layout: React.FC = (props) => {\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn(\r\n\t\t<Box my={4}>\r\n\t\t\t<NavigationBar />\r\n\t\t\t<div className={classes.appBody}>\r\n\t\t\t\t{ props.children }\r\n\t\t\t</div>\r\n\t\t</Box>\r\n\t);\t\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport 'mapbox-gl/dist/mapbox-gl.css'\r\nimport { Marker } from 'react-map-gl';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\n\r\ninterface IProps {\r\n    id: string,\r\n    latitude: number,\r\n    longitude: number,\r\n    color: string,\r\n    onSensorClick: (id: string) => void\r\n}\r\n\r\nconst SensorMarker: React.FC<IProps> = (props) => {\r\n\r\n    return (\r\n\r\n        <Marker\r\n            key={props.id}\r\n            longitude={props.longitude}\r\n            latitude={props.latitude}\r\n        >\r\n            <FiberManualRecordIcon \r\n                fontSize=\"small\" \r\n                style={{ color: props.color }}\r\n                onClick={()=>props.onSensorClick(props.id)} \r\n            />\r\n        \r\n        </Marker>\r\n\r\n    );\r\n}\r\n\r\nexport default SensorMarker;\r\n","import { API, graphqlOperation } from 'aws-amplify';\r\nimport { getSensor, listSensors } from '../graphql/queries';\r\nimport { GetSensorQuery, ListSensorsQuery } from '../API';\r\n\r\ninterface IGeo {\r\n    latitude: number,\r\n    longitude: number\r\n}\r\n\r\nexport interface ISensor {\r\n    sensorId: string,\r\n    name: string,\r\n    geo: IGeo,\r\n    enabled: boolean,\r\n    status: number\r\n}\r\n\r\nexport const GetSensorStatusColor = (status : number) => {\r\n    \r\n    let r = \"\";\r\n\r\n    if (status === 1) {\r\n        r = \"green\"\r\n    } else if (status === 2) {\r\n        r = \"yellow\"\r\n    } else if (status === 3) {\r\n        r = \"red\"\r\n    } else {\r\n      r = \"white\"\r\n    }\r\n\r\n    return r;\r\n}\r\n\r\nexport const GetSensor = async (sensorId: string): Promise<ISensor | null> => {\r\n\r\n    try {\r\n\r\n        const response = (await API.graphql(graphqlOperation(getSensor, {sensorId: sensorId}))) as {\r\n            data: GetSensorQuery;\r\n          };\r\n\r\n        if (response.data.getSensor){\r\n            \r\n            const r = response.data.getSensor as ISensor;\r\n            \r\n            return r;\r\n        }\r\n        else {\r\n\r\n            return null;\r\n        }\r\n\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const GetSensors = async (): Promise<Array<ISensor>> => {\r\n\r\n    try {\r\n\r\n        const response = (await API.graphql(graphqlOperation(listSensors))) as {\r\n            data: ListSensorsQuery;\r\n          };\r\n\r\n        if (response.data && response.data.listSensors) {\r\n            \r\n            const r = response.data.listSensors as Array<ISensor>;\r\n            \r\n            return r;\r\n        }\r\n        else {\r\n\r\n            return Array<ISensor>();\r\n        }\r\n\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n","/* tslint:disable */\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const listSensors = /* GraphQL */ `\n  query ListSensors {\n    listSensors {\n      sensorId\n      name\n      enabled\n      geo {\n        latitude\n        longitude\n      }\n      status\n    }\n  }\n`;\nexport const getSensor = /* GraphQL */ `\n  query GetSensor($sensorId: String!) {\n    getSensor(sensorId: $sensorId) {\n      sensorId\n      name\n      enabled\n      geo {\n        latitude\n        longitude\n      }\n      status\n    }\n  }\n`;\nexport const getSensorValue = /* GraphQL */ `\n  query GetSensorValue($id: ID!) {\n    getSensorValue(id: $id) {\n      id\n      sensorId\n      pH\n      temperature\n      salinity\n      disolvedO2\n      status\n      timestamp\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listSensorValues = /* GraphQL */ `\n  query ListSensorValues(\n    $filter: ModelSensorValueFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listSensorValues(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        sensorId\n        pH\n        temperature\n        salinity\n        disolvedO2\n        status\n        timestamp\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n","import React, { useState, useEffect } from 'react';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport { useHistory } from 'react-router-dom'\r\nimport { makeStyles } from '@material-ui/core';\r\nimport 'mapbox-gl/dist/mapbox-gl.css'\r\nimport ReactMapGL, { NavigationControl } from 'react-map-gl';\r\nimport SensorMarker from '../../components/SensorMarker/SensorMarker'\r\nimport { onCreateSensorValues } from '../../graphql/subscriptions';\r\nimport { ISensor, GetSensors, GetSensorStatusColor } from '../../api/Sensors';\r\n\r\nimport settings from '../../settings.json';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  navStyle: {\r\n    position: \"absolute\",\r\n    top: 36,\r\n    left: 0,\r\n    padding: \"10px\"\r\n  }\r\n}));\r\n\r\ninterface IViewPort {\r\n  latitude: number,\r\n  longitude: number,\r\n  zoom: number,\r\n  bearing: number,\r\n  pitch: number\r\n}\r\n\r\ninterface ISensorsSubscriptionResponse {\r\n  value: {\r\n    data: {\r\n      onCreateSensorValues: {\r\n        sensorId: string,\r\n        status: number\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst MapPage: React.FC = () => {\r\n  \r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const maxZoom = 7;\r\n\r\n  //state variables\r\n  const [viewPort, setViewPort] = useState<IViewPort>({\r\n        latitude: -44.2074,\r\n        longitude: -73.8547,\r\n        zoom: maxZoom,\r\n        bearing: 0,\r\n        pitch: 0\r\n      }\r\n  ); \r\n\r\n  const [sensors, setSensors] = useState<Array<ISensor>>([]);\r\n  const [readyToSubscribe, setReadyToSubscribe] = useState(false);\r\n\r\n  //fetch initial list of sensors and display current state\r\n  useEffect(() => {\r\n\r\n    const initSensors = async () => {\r\n      \r\n      console.log('fetching sensors');\r\n\r\n      try {\r\n\r\n        const response = await GetSensors();\r\n\r\n        if (response) {\r\n          setSensors(response);\r\n          console.log('sensors retrived');\r\n          setReadyToSubscribe(true);\r\n        }\r\n      }\r\n      catch (error) {\r\n        console.log('error fetching sensors', error);\r\n      }\r\n    };\r\n\r\n    initSensors()\r\n\r\n  }, []);\r\n\r\n  //subscribe to changes in sensor values\r\n  useEffect(() => {\r\n\r\n    if (readyToSubscribe){\r\n\r\n      console.log('start subscription to sensors');\r\n      \r\n      const subscriber = API.graphql(graphqlOperation(onCreateSensorValues)).subscribe({\r\n        next: (response: ISensorsSubscriptionResponse) => {\r\n\r\n          //update the sensor's status in state\r\n          if (response.value.data.onCreateSensorValues) {\r\n            \r\n            var newSensors = [...sensors];\r\n        \r\n            for (let item of newSensors) {\r\n              if (item.sensorId === response.value.data.onCreateSensorValues.sensorId){\r\n                item.status = response.value.data.onCreateSensorValues.status;\r\n                break;\r\n              }\r\n            }\r\n\r\n            console.log('sensors updated');\r\n\r\n            setSensors(newSensors);\r\n          }\r\n        },\r\n        error: (error: any) => {\r\n          console.log('error on sensors subscription', error);\r\n        }\r\n      });\r\n\r\n      return () => {\r\n        console.log('terminating subscription to sensors');\r\n        subscriber.unsubscribe();\r\n      }\r\n    }\r\n\r\n  // eslint-disable-next-line \r\n  }, [readyToSubscribe]);\r\n\r\n  const updateViewPort = (viewPort : IViewPort) => {\r\n    if (viewPort.zoom >= maxZoom) {\r\n      setViewPort(viewPort);\r\n    } \r\n  }\r\n\r\n  const handleSensorClick = (id : string) => {\r\n    history.push('/sensor/' + id)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ReactMapGL\r\n        {...viewPort}\r\n        width=\"100vw\"\r\n        height=\"100vh\"\r\n        mapStyle=\"mapbox://styles/mapbox/dark-v9\"\r\n        onViewportChange={updateViewPort}\r\n        mapboxApiAccessToken={settings.mapboxApiAccessToken}\r\n      >\r\n\r\n        {sensors.map((sensor) =>\r\n            (\r\n              <SensorMarker \r\n                key={sensor.sensorId}\r\n                id={sensor.sensorId}\r\n                latitude={sensor.geo.latitude}\r\n                longitude={sensor.geo.longitude}\r\n                color={GetSensorStatusColor(sensor.status)}\r\n                onSensorClick={handleSensorClick}\r\n              />\r\n            )\r\n          )\r\n        }\r\n\r\n        <div className={classes.navStyle}>\r\n          <NavigationControl />\r\n        </div>\r\n\r\n      </ReactMapGL>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapPage;\r\n","/* tslint:disable */\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateSensorValue = /* GraphQL */ `\n  subscription OnCreateSensorValue($sensorId: String!) {\n    onCreateSensorValue(sensorId: $sensorId) {\n      id\n      sensorId\n      pH\n      temperature\n      salinity\n      disolvedO2\n      status\n      timestamp\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onCreateSensorValues = /* GraphQL */ `\n  subscription OnCreateSensorValues {\n    onCreateSensorValues {\n      id\n      sensorId\n      pH\n      temperature\n      salinity\n      disolvedO2\n      status\n      timestamp\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { Line } from 'react-chartjs-2';\r\nimport { ChartOptions, defaults } from 'chart.js';\r\n\r\ndefaults.global.defaultFontColor = '#ffffff';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  paper: {\r\n      padding: theme.spacing(2),\r\n      display: 'flex',\r\n      overflow: 'auto',\r\n      flexDirection: 'column',\r\n  },\r\n  title: {\r\n      fontSize:20\r\n  },\r\n  chart: {\r\n      padding: 10,\r\n      height: 400\r\n  }\r\n}));\r\n\r\ninterface IProps {\r\n    title: string,\r\n    value: number | null\r\n}\r\n\r\ninterface IChartData {\r\n  labels: Array<string>,\r\n  datasets: Array<IData>\r\n}\r\n\r\ninterface IData {\r\n  pointBackgroundColor: string,\r\n  data: Array<number>\r\n}\r\n\r\nconst LineChartWidget: React.FC<IProps> = ({title, value}: IProps) => {\r\n  \r\n  const classes = useStyles();\r\n\r\n  const [chartData, setChartData] = useState<IChartData>({\r\n    labels: [],\r\n    datasets: [\r\n      {\r\n        pointBackgroundColor: \"#fff\",\r\n        data: []\r\n      }\r\n    ]\r\n  })\r\n\r\n  useEffect(() => {\r\n\r\n    const UpdateValues = (value : number)=> {\r\n\r\n      const newChartDataSet = { ...chartData.datasets[0] };\r\n      newChartDataSet.data.push(value);\r\n  \r\n      const newChartData = {\r\n        ...chartData,\r\n        datasets: [newChartDataSet],\r\n        labels: chartData.labels.concat(\r\n          new Date().toLocaleTimeString()\r\n        )\r\n      };\r\n  \r\n      setChartData(newChartData);\r\n    }\r\n\r\n    if (value) {\r\n      UpdateValues(value);\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [value]);\r\n\r\n  const options : ChartOptions = {\r\n    title: { display: false },\r\n    legend: { display: false },\r\n    responsive: true,\r\n    maintainAspectRatio: false\r\n  }\r\n\r\n  return (\r\n    <Paper className={classes.paper}>\r\n        <div className={classes.title}>\r\n            {title}\r\n        </div>\r\n        <div className={classes.chart}>\r\n            <Line \r\n              data={chartData} \r\n              options={options}\r\n            />\r\n        </div>\r\n    </Paper>  \r\n  );\r\n}\r\n\r\nexport default LineChartWidget;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom'\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { onCreateSensorValue } from '../../graphql/subscriptions';\r\nimport { GetSensor } from '../../api/Sensors';\r\nimport NumericWidget, { WIDGET_MODE } from '../../components/NumericWidget/NumericWidget';\r\nimport LineChartWidget from '../../components/LineChartWidget/LineChartWidget';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  dashboardContainer: {\r\n    marginTop:100\r\n  },\r\n  title: {\r\n    marginBottom: 20,\r\n    minHeight:30\r\n  }\r\n}));\r\n\r\ninterface ISensorSubscriptionResponse {\r\n  value: {\r\n    data: {\r\n      onCreateSensorValue: {\r\n        name: string,\r\n        pH: number,\r\n        temperature: number,\r\n        salinity: number,\r\n        disolvedO2: number\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst SensorPage: React.FC = () => {\r\n  \r\n  const classes = useStyles();\r\n  const { id } = useParams();\r\n\r\n  const [name, setName] = useState(\"Fetching sensor data...\");\r\n  const [pH, setPH] = useState<number | null>(null);\r\n  const [temperature, setTemperature] = useState<number | null>(null);\r\n  const [salinity, setSalinity] = useState<number | null>(null);\r\n  const [disolvedO2, setDisolvedO2] = useState<number | null>(null);\r\n  const [readyToSubscribe, setReadyToSubscribe] = useState(false);\r\n\r\n  //fetch sensor to get name\r\n  useEffect(() => {\r\n\r\n    setReadyToSubscribe(false);\r\n\r\n    const initSensor = async () => {\r\n      \r\n      console.log('fetching sensor');\r\n\r\n      try {\r\n\r\n        const response = await GetSensor(id || \"\");\r\n\r\n        if (response) {\r\n          setName(response.name);\r\n          console.log('sensor retrived');\r\n          setReadyToSubscribe(true);\r\n        }\r\n      }\r\n      catch (error) {\r\n        console.log('error fetching sensor', error);\r\n      }\r\n    };\r\n\r\n    initSensor()\r\n\r\n  }, [id]);\r\n\r\n  //subscribe to changes to the sensor's value\r\n  useEffect(() => {  \r\n\r\n    if (readyToSubscribe){\r\n    \r\n      console.log('start subscription to sensor');\r\n\r\n      const subscriber = API.graphql(graphqlOperation(onCreateSensorValue, {sensorId: id})).subscribe({\r\n        next: (response: ISensorSubscriptionResponse) => {\r\n  \r\n          //update the sensor's status in state\r\n          if (response.value.data.onCreateSensorValue) {\r\n\r\n            setPH(response.value.data.onCreateSensorValue.pH);\r\n            setTemperature(response.value.data.onCreateSensorValue.temperature);\r\n            setSalinity(response.value.data.onCreateSensorValue.salinity);\r\n            setDisolvedO2(response.value.data.onCreateSensorValue.disolvedO2);\r\n\r\n            console.log('sensor value received');\r\n          }\r\n        },\r\n        error: (error: any) => {\r\n          console.log('error on sensor subscription', error);\r\n        }\r\n      });\r\n\r\n      return () => {\r\n        console.log('terminating subscription to sensor');\r\n        subscriber.unsubscribe();\r\n      }\r\n    }\r\n      \r\n  }, [id, readyToSubscribe]);\r\n\r\n  return (\r\n\r\n    <Container className={classes.dashboardContainer} maxWidth=\"lg\">\r\n      <div className={classes.title}>\r\n        <Typography variant=\"h5\" align=\"left\" >\r\n            {name}\r\n        </Typography>\r\n      </div>\r\n\r\n      <Grid container spacing={4}>\r\n\r\n        <Grid item xs={12} sm={6} md={3} lg={3} xl={3}>\r\n          <NumericWidget\r\n            mode={WIDGET_MODE.CURRENT}\r\n            title=\"pH\"\r\n            value={pH}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6} md={3} lg={3} xl={3}>\r\n          <NumericWidget\r\n            mode={WIDGET_MODE.CURRENT}\r\n            title=\"Temperature\"\r\n            value={temperature}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6} md={3} lg={3} xl={3}>\r\n          <NumericWidget\r\n            mode={WIDGET_MODE.CURRENT}\r\n            title=\"Salinity\"\r\n            value={salinity}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6} md={3} lg={3} xl={3}>\r\n          <NumericWidget\r\n            mode={WIDGET_MODE.CURRENT}\r\n            title=\"Disolved O2\"\r\n            value={disolvedO2}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container spacing={4}>\r\n        <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\r\n        <LineChartWidget\r\n            title=\"pH\"\r\n            value={pH}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container spacing={4}>\r\n        <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\r\n        <LineChartWidget\r\n            title=\"Temperature\"\r\n            value={temperature}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container spacing={4}>\r\n        <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\r\n        <LineChartWidget\r\n            title=\"Salinity\"\r\n            value={salinity}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container spacing={4}>\r\n        <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\r\n        <LineChartWidget\r\n            title=\"Disolved O2\"\r\n            value={disolvedO2}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default SensorPage;\r\n","import React from 'react';\r\nimport {\r\n\tHashRouter as Router,\r\n\tRoute,\r\n\tSwitch,\r\n\tRedirect\r\n} from 'react-router-dom';\r\nimport { withAuthenticator } from 'aws-amplify-react'\r\nimport Layout from './components/Layout/Layout'\r\n\r\nimport MapPage from './pages/MapPage/MapPage'\r\nimport SensorPage from './pages/SensorPage/SensorPage'\r\n\r\nconst signUpConfig = {\r\n  hideAllDefaults: true,\r\n  signUpFields: [\r\n    {\r\n      label: 'Email',\r\n      key: 'username',\r\n      required: true,\r\n      placeholder: 'Email',\r\n      type: 'email',\r\n      displayOrder: 1,\r\n    },\r\n    {\r\n      label: 'Password',\r\n      key: 'password',\r\n      required: true,\r\n      placeholder: 'Password',\r\n      type: 'password',\r\n      displayOrder: 2,\r\n    },\r\n  ],\r\n}\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Router>\r\n      <Layout>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={MapPage} />\r\n            <Route exact path=\"/sensor/:id\" component={SensorPage} />\r\n            <Redirect to=\"/\"/>\r\n        </Switch>\r\n      </Layout>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default withAuthenticator(App, false, [], null, null, signUpConfig);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport Amplify from 'aws-amplify'\r\n\r\nimport config from './aws-exports'\r\nimport theme from './theme';\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n//Amplify.Logger.LOG_LEVEL = \"DEBUG\";\r\n\r\nAmplify.configure(config)\r\n\r\nReactDOM.render(\r\n    <ThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        <App />\r\n    </ThemeProvider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}